{
  "swagger": "2.0",
  "info": {
    "title": "Form Recognizer API",
    "version": "v2.0-preview",
    "description": "Form Recognizer extracts information from forms and images into structured data.  It includes the following options:\n* Custom - Extracts information from forms (PDFs and images) into structured data based on a model created from a set of representative training forms. Form Recognizer learns the structure of your forms to intelligently extract text and data. It ingests text from forms, applies machine learning technology to identify keys, tables, and fields, and then outputs structured data that includes the relationships within the original file.\n* Prebuilt Receipt - Detects and extracts data from receipts using optical character recognition (OCR) and our receipt model, enabling you to easily extract structured data from receipts such as merchant name, merchant phone number, transaction date, transaction total, and more.\n* Layout - Extracts text and table structure from documents using optical character recognition (OCR).\n\n<br/>This API is currently available in:\n\n* West Europe - westeurope.api.cognitive.microsoft.com\n* West US 2 - westus2.api.cognitive.microsoft.com"
  },
  "host": "westus2.api.cognitive.microsoft.com",
  "basePath": "/formrecognizer/v2.0-preview",
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "apiKeyHeader": {
      "type": "apiKey",
      "name": "Ocp-Apim-Subscription-Key",
      "in": "header"
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "apiKeyHeader": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "x-servers": [
    {
      "url": "https://westus2.api.cognitive.microsoft.com"
    },
    {
      "url": "https://cognitiveusw2prod.cognitiveservices.azure.com"
    }
  ],
  "paths": {
    "/custom/models/{modelId}/analyzeResults/{resultId}": {
      "get": {
        "description": "Obtain current status and the result of the analyze form operation.",
        "operationId": "GetAnalyzeFormResult",
        "summary": "Get Analyze Form Result",
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "description": "Format - uuid. Model identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "resultId",
            "in": "path",
            "description": "Format - uuid. Analyze operation result identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "JSON fields in the response body:\n<table class=\"element table\">\n  <thead>\n    <tr>\n      <th>Field</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>status</td>\n      <th>String</th>\n      <td><a href=\"/docs/services/form-recognizer-api-v2-preview/operations/AnalyzeWithCustomForm\">Analyze Form</a> operation status.\n        Possible values:<ul>\n          <li><b>notStarted</b>: The analysis operation has not started.</li>\n          <li><b>running</b>: The analysis operation is in progress.</li>\n          <li><b>failed</b>: The analysis operation has failed.</li>\n          <li><b>succeeded</b>: The analysis operation has succeeded.</li>\n        </ul>If the status is <b>succeeded</b>, the response JSON will include the form understanding and text recognition results. The form understanding result is organized as a list of key-value pairs and tables for each page, as well as a set of recognized fields for each detected document. When includeTextDetails is true, the detailed text recognition result is organized as a hierarchy of lines and words, with text, bounding box and confidence information.</td>\n    </tr>\n    <tr>\n      <td>createdDateTime</td>\n      <th>String</th>\n      <td>Date and time (UTC) when the operation was created.</td>\n    </tr>\n    <tr>\n      <td>lastUpdatedDateTime</td>\n      <th>String</th>\n      <td>Date and time (UTC) when the status is last updated.</td>\n    </tr>\n    <tr>\n      <td>analyzeResult</td>\n      <th>Object</th>\n      <td>Results of the analyze operation.</td>\n    </tr>\n    <tr>\n      <td>version</td>\n      <th>String</th>\n      <td>The version of schema used for this result.</td>\n    </tr>\n    <tr>\n      <td>readResults</td>\n      <th>[Object]</th>\n      <td>List of of extracted text result for each page in the input document.</td>\n    </tr>\n    <tr>\n      <td>page</td>\n      <th>Integer</th>\n      <td>The 1-based page number in the input document.</td>\n    </tr>\n    <tr>\n      <td>width</td>\n      <th>Number</th>\n      <td>The width of the image/PDF in pixels/inches, respectively.</td>\n    </tr>\n    <tr>\n      <td>height</td>\n      <th>Number</th>\n      <td>The height of the image/PDF in pixels/inches, respectively.</td>\n    </tr>\n    <tr>\n      <td>unit</td>\n      <th>String</th>\n      <td>The unit used by the width, height and boundingBox properties. For images, the unit is \"pixel\". For PDF, the unit is \"inch\".</td>\n    </tr>\n    <tr>\n      <td>angle</td>\n      <th>Number</th>\n      <td>The general orientation of the text in clockwise direction, measured in degrees between (-180, 180].</td>\n    </tr>\n    <tr>\n      <td>language</td>\n      <th>String</th>\n      <td>The detected language on the page overall or of a specific line if different from the page.</td>\n    </tr>\n    <tr>\n      <td>lines</td>\n      <th>[Object]</th>\n      <td>\n        List of text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order. This field only appears when <b>includeTextDetails</b> is set to true.\n      </td>\n    </tr>\n    <tr>\n      <td>words</td>\n      <th>[Object]</th>\n      <td>List of words in the text line.</td>\n    </tr>\n    <tr>\n      <td>boundingBox</td>\n      <th>[Number]</th>\n      <td>\n        Quadrangle bounding box of a line or word, depending on the parent object, specified as a list of 8 numbers. The coordinates are specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.\n      </td>\n    </tr>\n    <tr>\n      <td>text</td>\n      <th>String</th>\n      <td>Extracted field text in documentResults, or the text content of a word/line in readResults.</td>\n    </tr>\n    <tr>\n      <td>confidence</td>\n      <th>Number</th>\n      <td>Confidence value.</td>\n    </tr>\n    <tr>\n      <td>pageResults</td>\n      <th>[Object]</th>\n      <td>Page-level information extracted from the input.</td>\n    </tr>\n    <tr>\n      <td>page</td>\n      <th>Integer</th>\n      <td>Page number.</td>\n    </tr>\n    <tr>\n      <td>clusterId</td>\n      <th>Integer</th>\n      <td>Cluster identifier.</td>\n    </tr>\n    <tr>\n      <td>keyValuePairs</td>\n      <th>[Object]</th>\n      <td>List of key-value pairs extracted from the page.</td>\n    </tr>\n    <tr>\n      <td>tables</td>\n      <th>[Object]</th>\n      <td>List of data tables extracted from the page.</td>\n    </tr>\n    <tr>\n      <td>label</td>\n      <th>String</th>\n      <td>A user defined label for the key/value pair entry.</td>\n    </tr>\n    <tr>\n      <td>key</td>\n      <th>Object</th>\n      <td>Information about the extracted key in a key-value pair.</td>\n    </tr>\n    <tr>\n      <td>value</td>\n      <th>Object</th>\n      <td>Information about the extracted value in a key-value pair.</td>\n    </tr>\n    <tr>\n      <td>rows</td>\n      <th>Integer</th>\n      <td>Number of rows.</td>\n    </tr>\n    <tr>\n      <td>columns</td>\n      <th>Integer</th>\n      <td>Number of columns.</td>\n    </tr>\n    <tr>\n      <td>cells</td>\n      <th>[Object]</th>\n      <td>List of cells contained in the table.</td>\n    </tr>\n    <tr>\n      <td>rowIndex</td>\n      <th>Integer</th>\n      <td>Row index of the cell.</td>\n    </tr>\n    <tr>\n      <td>columnIndex</td>\n      <th>Integer</th>\n      <td>Column index of the cell.</td>\n    </tr>\n    <tr>\n      <td>rowSpan</td>\n      <th>Integer</th>\n      <td>Number of rows spanned by this cell.</td>\n    </tr>\n    <tr>\n      <td>columnSpan</td>\n      <th>Integer</th>\n      <td>Number of columns spanned by this cell.</td>\n    </tr>\n    <tr>\n      <td>elements</td>\n      <th>[String]</th>\n      <td>When includeTextDetails is set to true, a list of JSON references to the text elements constituting this field.</td>\n    </tr>\n    <tr>\n      <td>documentResults</td>\n      <th>[Object]</th>\n      <td>An array of objects, each representing a receipt detected in the input document.</td>\n    </tr>\n    <tr>\n      <td>docType</td>\n      <th>String</th>\n      <td>The value is set to \"prebuilt:receipt\" to indicate a receipt document.</td>\n    </tr>\n    <tr>\n      <td>pageRange</td>\n      <th>[Integer, Integer]</th>\n      <td>First and last page numbers where the receipt is found. Currently, only single-page receipts are supported.</td>\n    </tr>\n    <tr>\n      <td>fields</td>\n      <th>Object</th>\n      <td>Dictionary of detected field values.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <th>String</th>\n      <td>Data type of the field value. Currently, possible types include \"string\", \"number\", \"phoneNumber\", \"date\", \"time\", \"array\", and \"object\".</td>\n    </tr>\n    <tr>\n      <td>valueString</td>\n      <th>String</th>\n      <td>Semantic value of \"string\" fields.</td>\n    </tr>\n    <tr>\n      <td>valueNumber</td>\n      <th>Number</th>\n      <td>Semantic value of \"number\" fields.</td>\n    </tr>\n    <tr>\n      <td>valuePhoneNumber</td>\n      <th>String</th>\n      <td>Semantic value of \"phoneNumber\" fields.</td>\n    </tr>\n    <tr>\n      <td>valueDate</td>\n      <th>String</th>\n      <td>Semantic value of \"date\" fields.</td>\n    </tr>\n    <tr>\n      <td>valueTime</td>\n      <th>String</th>\n      <td>Semantic value of \"time\" fields.</td>\n    </tr>\n    <tr>\n      <td>valueArray</td>\n      <th>[Object]</th>\n      <td>Semantic value of \"array\" fields.</td>\n    </tr>\n    <tr>\n      <td>valueObject</td>\n      <th>Object</th>\n      <td>Semantic value of \"object\" fields.</td>\n    </tr>\n    <tr>\n      <td>errors</td>\n      <th>[Object]</th>\n      <td>List of errors reported during the analyze operation.</td>\n    </tr>\n  </tbody>\n</table>\n",
            "schema": {
              "$ref": "#/definitions/AnalyzeOperationResult"
            },
            "examples": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Invalid or expired result identifier."
          },
          "500": {
            "description": "Internal server error."
          },
          "503": {
            "description": "Transient fault."
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/layout/analyze": {
      "post": {
        "description": "Extract text and layout information from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the Url location of the document to be analyzed.",
        "operationId": "AnalyzeLayoutAsync",
        "summary": "Analyze Layout",
        "parameters": [
          {
            "name": "sourcePath",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SourcePath"
            },
            "description": ".json, .pdf, .jpg, .png or .tiff type file stream."
          }
        ],
        "consumes": [
          "application/json",
          "application/pdf",
          "image/jpeg",
          "image/png",
          "image/tiff"
        ],
        "responses": {
          "202": {
            "description": "The service has accepted the request and will start processing soon.  The client can query the operation status and result using the URL specified in the 'Operation-Location' response header.  The URL expires in 48 hours.\n<br/>\n<table class=\"element table\">\n    <thead/>\n    <tbody>\n        <tr>\n            <td>\n                <b>Operation-Location</b>\n            </td>\n            <td>\n                URL containing the resultId used to track the progress and obtain the result of the analyze operation.\n                <br/>\n                Example: https://cognitiveservice/formrecognizer/v2.0-preview/layout/analyzeResults/{resultId}\n            </td>\n        </tr>\n    </tbody>\n</table>",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "description": "URL containing the resultId used to track the progress and obtain the result of the analyze operation."
              }
            },
            "schema": {
              "$ref": "#/definitions/AnalyzeOperationResult"
            }
          },
          "400": {
            "description": "Bad request error. Detailed error code and message are specified in the JSON response:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>Bad or unrecognizable request JSON or binary file.</td>\n        </tr>\n        <tr>\n            <td>InvalidImageURL</td>\n            <td>Image URL is badly formatted.</td>\n        </tr>\n        <tr>\n            <td>FailedToDownloadImage</td>\n            <td>Failed to download image from input URL.</td>\n        </tr>\n        <tr>\n            <td>InvalidImage</td>\n            <td>The input data is not a valid image or password protected.</td>\n        </tr>\n        <tr>\n            <td>UnsupportedImageFormat</td>\n            <td>Image format unsupported. Supported formats include JPEG, PNG, PDF and TIFF.</td>\n        </tr>\n        <tr>\n            <td>InvalidImageSize</td>\n            <td>The input image is too large. It should not be larger than 20MB.</td>\n        </tr>\n        <tr>\n            <td>InvalidImageDimension</td>\n            <td>\n                The input image dimension is out of range. The minimum image dimension is 50 x 50 pixels and the maximum is 10000 x 10000 pixels. The maximum PDF dimension is 17 x 17 inches.\n            </td>\n        </tr>\n    </tbody>\n</table>",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid input."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. 'Content-Type' does not match the POST content.\n<br/>\n<ul>\n    <li>For image URL, 'Content-Type' should be 'application/json'.</li>\n    <li>For binary PDF data, 'Content-Type' should be 'application/pdf'.</li>\n    <li>For binary image data, 'Content-Type' should be 'image/jpeg', 'image/png' or 'image/tiff'.</li>\n</ul>\n<br/>\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Unsupported media type."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Internal server error."
                }
              }
            }
          },
          "503": {
            "description": "Transient fault while querying Microsoft Azure storage services.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "StorageException",
                  "message": "Transient fault occurred while querying Microsoft Azure storage services. Please try again later."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/prebuilt/receipt/analyze": {
      "post": {
        "description": "Extract field text and semantic values from a given receipt document. \nThe input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the Url location of the document to be analyzed.\n\nNote: this technology is currently only available for English receipts from the United States.",
        "operationId": "AnalyzeReceiptAsync",
        "summary": "Analyze Receipt",
        "parameters": [
          {
            "name": "includeTextDetails",
            "in": "query",
            "description": "Include text lines and element references in the result.  Default: false.",
            "type": "boolean"
          },
          {
            "name": "sourcePath",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SourcePath"
            },
            "description": "Document containing the receipt image(s) to be analyzed. The POST body should be the raw image binary or the image URL\nin JSON.<br />Additional requirements:<ul>\n  <li>Image format must be one of JPEG, PNG, PDF or TIFF.</li>\n  <li>For PDF and TIFF, only the first 200 pages are processed. <ul>\n      <li>For free tier subscribers, only the first 2 pages are processed.</li>\n    </ul>\n  </li>\n  <li>Image file size must be less than 20 MB.</li>\n  <li>Image dimensions must be at least 50 x 50 pixels and at most 10000 x 10000 pixels. PDF dimensions must be at most\n    17 x 17 inches, corresponding to Legal or A3 paper sizes and smaller.</li>\n</ul>"
          }
        ],
        "consumes": [
          "application/json",
          "application/pdf",
          "image/jpeg",
          "image/png",
          "image/tiff"
        ],
        "responses": {
          "202": {
            "description": "The service has accepted the request and will start processing soon.  The client can query the operation status and result using the URL specified in the 'Operation-Location' response header.  The URL expires in 48 hours.\n<br/>\n<table class=\"element table\">\n    <thead/>\n    <tbody>\n        <tr>\n            <td>\n                <b>Operation-Location</b>\n            </td>\n            <td>\n                URL containing the resultId used to track the progress and obtain the result of the analyze operation.\n                <br/>\n                Example: https://cognitiveservice/formrecognizer/v2.0-preview/prebulit/receipt/analyzeResults/{resultId}\n            </td>\n        </tr>\n    </tbody>\n</table>",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "description": "URL containing the resultId used to track the progress and obtain the result of the analyze operation. This URL expires in 48 hours."
              }
            },
            "schema": {
              "$ref": "#/definitions/AnalyzeOperationResult"
            }
          },
          "400": {
            "description": "Bad request error. Detailed error code and message are specified in the JSON response:\n<table class=\"element table\">\n    <thead>\n        <tr>\n            <th>Error Code</th>\n            <th>Description</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>BadArgument</td>\n            <td>Bad or unrecognizable request JSON or binary file.</td>\n        </tr>\n        <tr>\n            <td>InvalidImageURL</td>\n            <td>Image URL is badly formatted.</td>\n        </tr>\n        <tr>\n            <td>FailedToDownloadImage</td>\n            <td>Failed to download image from input URL.</td>\n        </tr>\n        <tr>\n            <td>InvalidImage</td>\n            <td>The input data is not a valid image or password protected.</td>\n        </tr>\n        <tr>\n            <td>UnsupportedImageFormat</td>\n            <td>Image format unsupported. Supported formats include JPEG, PNG, PDF and TIFF.</td>\n        </tr>\n        <tr>\n            <td>InvalidImageSize</td>\n            <td>The input image is too large. It should not be larger than 20MB.</td>\n        </tr>\n        <tr>\n            <td>InvalidImageDimension</td>\n            <td>\n                The input image dimension is out of range. The minimum image dimension is 50 x 50 pixels and the maximum is 10000 x 10000 pixels. The maximum PDF dimension is 17 x 17 inches.\n            </td>\n        </tr>\n    </tbody>\n</table>\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Invalid input."
                }
              }
            }
          },
          "415": {
            "description": "Unsupported media type error. 'Content-Type' does not match the POST content.\n<br/>\n<ul>\n    <li>For image URL, 'Content-Type' should be 'application/json'.</li>\n    <li>For binary PDF data, 'Content-Type' should be 'application/pdf'.</li>\n    <li>For binary image data, 'Content-Type' should be 'image/jpeg', 'image/png' or 'image/tiff'.</li>\n</ul>\n<br/>\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Unsupported media type."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Internal server error."
                }
              }
            }
          },
          "503": {
            "description": "Transient fault while querying Microsoft Azure storage services.\n",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "StorageException",
                  "message": "Transient fault occurred while querying Microsoft Azure storage services. Please try again later."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/prebuilt/receipt/analyzeResults/{resultId}": {
      "get": {
        "description": "Query the status and retrieve the result of an <a href=\"/docs/services/form-recognizer-api-v2-preview/operations/AnalyzeReceiptAsync\">Analyze Receipt</a> operation. The URL to this interface can be obtained from the 'Operation-Location' header in the <a href=\"/docs/services/form-recognizer-api-v2-preview/operations/AnalyzeReceiptAsync\">Analyze Receipt</a> response.\nWe recommend calling this operation no more than once a second.",
        "operationId": "GetAnalyzeReceiptResult",
        "summary": "Get Analyze Receipt Result",
        "parameters": [
          {
            "name": "resultId",
            "in": "path",
            "description": "Format - uuid. Analyze operation result identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "JSON fields in the response body:\n<table class=\"element table\">\n  <thead>\n    <tr>\n      <th>Field</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>status</td>\n      <th>String</th>\n      <td><a href=\"/docs/services/form-recognizer-api-v2-preview/operations/AnalyzeReceiptAsync\">Analyze Receipt</a> operation status.\n        Possible values:<ul>\n          <li><b>notStarted</b>: The analysis operation has not started.</li>\n          <li><b>running</b>: The analysis operation is in progress.</li>\n          <li><b>failed</b>: The analysis operation has failed.</li>\n          <li><b>succeeded</b>: The analysis operation has succeeded.</li>\n        </ul>If the status is <b>succeeded</b>, the response JSON will include the receipt understanding and text recognition results. The receipt understanding result is organized as a dictionary of named field values, where each value contains the extracted text, normalized value, and corresponding word elements. The text recognition result is organized as a hierarchy of lines and words, with text, bounding box and confidence information. </td>\n    </tr>\n    <tr>\n      <td>createdDateTime</td>\n      <th>String</th>\n      <td>Date and time (UTC) when the operation was created.</td>\n    </tr>\n    <tr>\n      <td>lastUpdatedDateTime</td>\n      <th>String</th>\n      <td>Date and time (UTC) when the status is last updated.</td>\n    </tr>\n    <tr>\n      <td>analyzeResult</td>\n      <th>Object</th>\n      <td>Results of the analyze operation.</td>\n    </tr>\n    <tr>\n      <td>readResults</td>\n      <th>[Object]</th>\n      <td>List of of extracted text result for each page in the input document.</td>\n    </tr>\n    <tr>\n      <td>lines</td>\n      <th>[Object]</th>\n      <td>\n        List of text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order. This field only appears when <b>includeTextDetails</b> is set to true.\n      </td>\n    </tr>\n    <tr>\n      <td>words</td>\n      <th>[Object]</th>\n      <td>List of words in the text line.</td>\n    </tr>\n    <tr>\n      <td>boundingBox</td>\n      <th>[Number]</th>\n      <td>\n        Quadrangle bounding box of a line or word, depending on the parent object, specified as a list of 8 numbers. The coordinates are specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.\n      </td>\n    </tr>\n    <tr>\n      <td>text</td>\n      <th>String</th>\n      <td>Extracted field text in documentResults, or the text content of a word/line in readResults.</td>\n    </tr>\n    <tr>\n      <td>confidence</td>\n      <th>Number</th>\n      <td>Confidence value.</td>\n    </tr>\n    <tr>\n      <td>width</td>\n      <th>Number</th>\n      <td>The width of the image/PDF in pixels/inches, respectively.</td>\n    </tr>\n    <tr>\n      <td>height</td>\n      <th>Number</th>\n      <td>The height of the image/PDF in pixels/inches, respectively.</td>\n    </tr>\n    <tr>\n      <td>angle</td>\n      <th>Number</th>\n      <td>The general orientation of the text in clockwise direction, measured in degrees between (-180, 180].</td>\n    </tr>\n    <tr>\n      <td>page</td>\n      <th>Integer</th>\n      <td>The 1-based page number in the input document.</td>\n    </tr>\n    <tr>\n      <td>unit</td>\n      <th>String</th>\n      <td>The unit used by the width, height and boundingBox properties. For images, the unit is \"pixel\". For PDF, the unit is \"inch\".</td>\n    </tr>\n    <tr>\n      <td>language</td>\n      <th>String</th>\n      <td>The detected language on the page overall or of a specific line if different from the page.</td>\n    </tr>\n    <tr>\n      <td>version</td>\n      <th>String</th>\n      <td>The version of schema used for this result.</td>\n    </tr>\n    <tr>\n      <td>documentResults</td>\n      <th>[Object]</th>\n      <td>An array of objects, each representing a receipt detected in the input document.</td>\n    </tr>\n    <tr>\n      <td>docType</td>\n      <th>String</th>\n      <td>The value is set to \"prebuilt:receipt\" to indicate a receipt document.</td>\n    </tr>\n    <tr>\n      <td>pageRange</td>\n      <th>[Integer, Integer]</th>\n      <td>First and last page numbers where the receipt is found. Currently, only single-page receipts are supported.</td>\n    </tr>\n    <tr>\n      <td>fields</td>\n      <th>Object</th>\n      <td>Dictionary of detected field values.</td>\n    </tr>\n    <tr>\n      <td>type</td>\n      <th>String</th>\n      <td>Data type of the field value. Currently, possible types include \"string\", \"number\", \"phoneNumber\", \"date\", \"time\", \"array\", and \"object\".</td>\n    </tr>\n    <tr>\n      <td>valueString</td>\n      <th>String</th>\n      <td>Semantic value of \"string\" fields.</td>\n    </tr>\n    <tr>\n      <td>valueNumber</td>\n      <th>Number</th>\n      <td>Semantic value of \"number\" fields.</td>\n    </tr>\n    <tr>\n      <td>valuePhoneNumber</td>\n      <th>String</th>\n      <td>Semantic value of \"phoneNumber\" fields.</td>\n    </tr>\n    <tr>\n      <td>valueDate</td>\n      <th>String</th>\n      <td>Semantic value of \"date\" fields.</td>\n    </tr>\n    <tr>\n      <td>valueTime</td>\n      <th>String</th>\n      <td>Semantic value of \"time\" fields.</td>\n    </tr>\n    <tr>\n      <td>valueArray</td>\n      <th>[Object]</th>\n      <td>Semantic value of \"array\" fields.</td>\n    </tr>\n    <tr>\n      <td>valueObject</td>\n      <th>Object</th>\n      <td>Semantic value of \"object\" fields.</td>\n    </tr>\n    <tr>\n      <td>elements</td>\n      <th>[String]</th>\n      <td>When includeTextDetails is set to true, a list of references to the text elements constituting this field.</td>\n    </tr>\n  </tbody>\n</table>\n<br/>\nSupported fields:\n<table class=\"element table\">\n  <thead>\n    <tr>\n      <th>Name</th>\n      <th>Type</th>\n      <th>Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>ReceiptType</td>\n      <td>string</td>\n      <td>\"Itemized\"</td>\n    </tr>\n    <tr>\n      <td>MerchantName</td>\n      <td>string</td>\n      <td>\"Contoso\"</td>\n    </tr>\n    <tr>\n      <td>MerchantPhoneNumber</td>\n      <td>phoneNumber</td>\n      <td>\"+19876543210\"</td>\n    </tr>\n    <tr>\n      <td>MerchantAddress</td>\n      <td>string</td>\n      <td>\"123 Main St Redmond WA 98052\"</td>\n    </tr>\n    <tr>\n      <td>TransactionDate</td>\n      <td>date</td>\n      <td>\"2019-06-26\"</td>\n    </tr>\n    <tr>\n      <td>TransactionTime</td>\n      <td>time</td>\n      <td>\"16:49:00\"</td>\n    </tr>\n    <tr>\n      <td>Total</td>\n      <td>number</td>\n      <td>14.34</td>\n    </tr>\n    <tr>\n      <td>Subtotal</td>\n      <td>number</td>\n      <td>12.34</td>\n    </tr>\n    <tr>\n      <td>Tax</td>\n      <td>number</td>\n      <td>2.00</td>\n    </tr>\n    <tr>\n      <td>Tip</td>\n      <td>number</td>\n      <td>1.00</td>\n    </tr>\n    <tr>\n      <td>Items</td>\n      <td>array of objects</td>\n      <td>\n[<br/>\n&nbsp;&nbsp;{ \"Name\": \"Surface Pro 6\", \"Quantity\": 1, \"Price\": 999.00, \"TotalPrice\": 999.00 },<br/>\n&nbsp;&nbsp;{ \"Name\": \"SurfacePen\", \"Quantity\": 2, \"Price\": 99.99, \"TotalPrice\": 199.98 }<br/>\n]\n      </td>\n    </tr>\n    <tr>\n      <td>Name</td>\n      <td>string</td>\n      <td>\"Surface Pro 6\"</td>\n    </tr>\n    <tr>\n      <td>Quantity</td>\n      <td>number</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <td>Price</td>\n      <td>number</td>\n      <td>999.00</td>\n    </tr>\n    <tr>\n      <td>TotalPrice</td>\n      <td>number</td>\n      <td>999.00</td>\n    </tr>\n  </tbody>\n</table>\n",
            "schema": {
              "$ref": "#/definitions/AnalyzeOperationResult"
            }
          },
          "404": {
            "description": "Invalid or expired result identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Operation ID is invalid or expired."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Internal server error."
                }
              }
            }
          },
          "503": {
            "description": "Transient fault while querying Microsoft Azure storage services.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "StorageException",
                  "message": "Transient fault occurred while querying Microsoft Azure storage services. Please try again later."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/custom/models/{modelId}": {
      "get": {
        "description": "Get detailed information about a custom model.",
        "operationId": "GetCustomModel",
        "summary": "Get Custom Model",
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "description": "Format - uuid. Model identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeKeys",
            "in": "query",
            "description": "Include list of extracted keys in model information.",
            "type": "boolean",
            "default": "False"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Model"
            }
          },
          "500": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error."
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "delete": {
        "description": "Mark model for deletion. Model artifacts will be permanently removed within 48 hours.",
        "operationId": "DeleteCustomModel",
        "summary": "Delete Custom Model",
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "description": "Format - uuid. Model identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully marked model for deletion. Model artifacts will be removed within 48 hours."
          },
          "500": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error."
          }
        }
      }
    },
    "/layout/analyzeResults/{resultId}": {
      "get": {
        "description": "Track the progress and obtain the result of the analyze layout operation",
        "operationId": "GetAnalyzeLayoutResult",
        "summary": "Get Analyze Layout Result",
        "parameters": [
          {
            "name": "resultId",
            "in": "path",
            "description": "Format - uuid. Analyze operation result identifier.",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "JSON fields in the response body:\n<table class=\"element table\">\n  <thead>\n    <tr>\n      <th>Field</th>\n      <th>Type</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td>status</td>\n      <th>String</th>\n      <td><a href=\"/docs/services/form-recognizer-api-v2-preview/operations/AnalyzeLayoutAsync\">Analyze Layout</a> operation status.\n        Possible values:<ul>\n          <li><b>notStarted</b>: The analysis operation has not started.</li>\n          <li><b>running</b>: The analysis operation is in progress.</li>\n          <li><b>failed</b>: The analysis operation has failed.</li>\n          <li><b>succeeded</b>: The analysis operation has succeeded.</li>\n        </ul>If the status is <b>succeeded</b>, the response JSON will include the layout and text recognition results. The layout result is organized as a list of tables for each page. When includeTextDetails is true, the detailed text recognition result is organized as a hierarchy of lines and words, with text, bounding box and confidence information.</td>\n    </tr>\n    <tr>\n      <td>createdDateTime</td>\n      <th>String</th>\n      <td>Date and time (UTC) when the operation was created.</td>\n    </tr>\n    <tr>\n      <td>lastUpdatedDateTime</td>\n      <th>String</th>\n      <td>Date and time (UTC) when the status is last updated.</td>\n    </tr>\n    <tr>\n      <td>analyzeResult</td>\n      <th>Object</th>\n      <td>Results of the analyze operation.</td>\n    </tr>\n    <tr>\n      <td>version</td>\n      <th>String</th>\n      <td>The version of schema used for this result.</td>\n    </tr>\n    <tr>\n      <td>readResults</td>\n      <th>[Object]</th>\n      <td>List of of extracted text result for each page in the input document.</td>\n    </tr>\n    <tr>\n      <td>page</td>\n      <th>Integer</th>\n      <td>The 1-based page number in the input document.</td>\n    </tr>\n    <tr>\n      <td>width</td>\n      <th>Number</th>\n      <td>The width of the image/PDF in pixels/inches, respectively.</td>\n    </tr>\n    <tr>\n      <td>height</td>\n      <th>Number</th>\n      <td>The height of the image/PDF in pixels/inches, respectively.</td>\n    </tr>\n    <tr>\n      <td>unit</td>\n      <th>String</th>\n      <td>The unit used by the width, height and boundingBox properties. For images, the unit is \"pixel\". For PDF, the unit is \"inch\".</td>\n    </tr>\n    <tr>\n      <td>angle</td>\n      <th>Number</th>\n      <td>The general orientation of the text in clockwise direction, measured in degrees between (-180, 180].</td>\n    </tr>\n    <tr>\n      <td>language</td>\n      <th>String</th>\n      <td>The detected language on the page overall or of a specific line if different from the page.</td>\n    </tr>\n    <tr>\n      <td>lines</td>\n      <th>[Object]</th>\n      <td>\n        List of text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order. This field only appears when <b>includeTextDetails</b> is set to true.\n      </td>\n    </tr>\n    <tr>\n      <td>words</td>\n      <th>[Object]</th>\n      <td>List of words in the text line.</td>\n    </tr>\n    <tr>\n      <td>boundingBox</td>\n      <th>[Number]</th>\n      <td>\n        Quadrangle bounding box of a line or word, depending on the parent object, specified as a list of 8 numbers. The coordinates are specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.\n      </td>\n    </tr>\n    <tr>\n      <td>text</td>\n      <th>String</th>\n      <td>Extracted field text in documentResults, or the text content of a word/line in readResults.</td>\n    </tr>\n    <tr>\n      <td>confidence</td>\n      <th>Number</th>\n      <td>Confidence value.</td>\n    </tr>\n    <tr>\n      <td>pageResults</td>\n      <th>[Object]</th>\n      <td>Page-level information extracted from the input.</td>\n    </tr>\n    <tr>\n      <td>page</td>\n      <th>Integer</th>\n      <td>Page number.</td>\n    </tr>\n    <tr>\n      <td>tables</td>\n      <th>[Object]</th>\n      <td>List of data tables extracted from the page.</td>\n    </tr>\n    <tr>\n      <td>rows</td>\n      <th>Integer</th>\n      <td>Number of rows.</td>\n    </tr>\n    <tr>\n      <td>columns</td>\n      <th>Integer</th>\n      <td>Number of columns.</td>\n    </tr>\n    <tr>\n      <td>cells</td>\n      <th>[Object]</th>\n      <td>List of cells contained in the table.</td>\n    </tr>\n    <tr>\n      <td>rowIndex</td>\n      <th>Integer</th>\n      <td>Row index of the cell.</td>\n    </tr>\n    <tr>\n      <td>columnIndex</td>\n      <th>Integer</th>\n      <td>Column index of the cell.</td>\n    </tr>\n    <tr>\n      <td>rowSpan</td>\n      <th>Integer</th>\n      <td>Number of rows spanned by this cell.</td>\n    </tr>\n    <tr>\n      <td>columnSpan</td>\n      <th>Integer</th>\n      <td>Number of columns spanned by this cell.</td>\n    </tr>\n    <tr>\n      <td>elements</td>\n      <th>[String]</th>\n      <td>When includeTextDetails is set to true, a list of JSON references to the text elements constituting this field.</td>\n    </tr>\n  </tbody>\n</table>\n",
            "schema": {
              "$ref": "#/definitions/AnalyzeOperationResult"
            }
          },
          "404": {
            "description": "Invalid or expired result identifier.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "BadArgument",
                  "message": "Operation ID is invalid or expired."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "Unspecified",
                  "message": "Internal server error."
                }
              }
            }
          },
          "503": {
            "description": "Transient fault while querying Microsoft Azure storage services.",
            "schema": {
              "$ref": "#/definitions/ErrorResponse"
            },
            "examples": {
              "application/json": {
                "error": {
                  "code": "StorageException",
                  "message": "Transient fault occurred while querying Microsoft Azure storage services. Please try again later."
                }
              }
            }
          }
        },
        "produces": [
          "application/json"
        ]
      }
    },
    "/custom/models": {
      "get": {
        "description": "Get information about all custom models",
        "operationId": "GetCustomModels",
        "summary": "List Custom Models",
        "parameters": [
          {
            "name": "op",
            "in": "query",
            "description": "Specify whether to return summary or full list of models.",
            "type": "string",
            "default": "full",
            "enum": [
              "full",
              "summary"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "schema": {
              "$ref": "#/definitions/Models"
            }
          },
          "500": {
            "description": "Response entity accompanying non-successful responses containing additional details about the error."
          }
        },
        "produces": [
          "application/json"
        ]
      },
      "post": {
        "description": "Create and train a custom model. The request must include a source parameter that is either an externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified, they must follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source path would be '/input/contosodataset'. All data to be trained is expected to be under the source folder or sub folders under it. Models are trained using documents that are of the following content type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'. Other type of content is ignored.",
        "operationId": "TrainCustomModelAsync",
        "summary": "Train Custom Model",
        "parameters": [
          {
            "name": "trainRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/TrainRequest"
            },
            "description": "Training request parameters."
          }
        ],
        "consumes": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "Request is queued successfully.",
            "headers": {
              "Location": {
                "type": "string",
                "description": "Location and ID of the model being trained. The status of model training is specified in the status property at the model location."
              }
            }
          },
          "500": {
            "description": "Internal server error."
          }
        }
      }
    },
    "/custom/models/{modelId}/analyze": {
      "post": {
        "description": "Extract key-value pairs, tables, and semantic values from a given document. The input document must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'. Alternatively, use 'application/json' type to specify the Url location of the document to be analyzed.",
        "operationId": "AnalyzeWithCustomForm",
        "summary": "Analyze Form",
        "parameters": [
          {
            "name": "modelId",
            "in": "path",
            "description": "Format - uuid. Model identifier.",
            "required": true,
            "type": "string"
          },
          {
            "name": "includeTextDetails",
            "in": "query",
            "description": "Include text lines and element references in the result.  Default: false.",
            "type": "boolean"
          },
          {
            "name": "sourcePath",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/SourcePath"
            },
            "description": ".json, .pdf, .jpg, .png or .tiff type file stream."
          }
        ],
        "consumes": [
          "application/json",
          "application/pdf",
          "image/jpeg",
          "image/png",
          "image/tiff"
        ],
        "responses": {
          "202": {
            "description": "The service has accepted the request and will start processing soon.  The client can query the operation status and result using the URL specified in the 'Operation-Location' response header.  The URL expires in 48 hours.\n<br/>\n<table class=\"element table\">\n    <thead/>\n    <tbody>\n        <tr>\n            <td>\n                <b>Operation-Location</b>\n            </td>\n            <td>\n                URL containing the resultId used to track the progress and obtain the result of the analyze operation.\n                <br/>\n                Example: https://cognitiveservice/formrecognizer/v2.0-preview/custom/models/{modelId}/analyzeResults/{resultId}\n            </td>\n        </tr>\n    </tbody>\n</table>",
            "headers": {
              "Operation-Location": {
                "type": "string",
                "description": "URL containing the resultId used to track the progress and obtain the result of the analyze operation."
              }
            },
            "schema": {
              "$ref": "#/definitions/AnalyzeOperationResult"
            }
          },
          "400": {
            "description": "Bad request error."
          },
          "404": {
            "description": "Model not found."
          },
          "415": {
            "description": "Unsupported media type error. 'Content-Type' does not match the POST content.\n<br/>\n<ul>\n    <li>For image URL, 'Content-Type' should be 'application/json'.</li>\n    <li>For binary PDF data, 'Content-Type' should be 'application/pdf'.</li>\n    <li>For binary image data, 'Content-Type' should be 'image/jpeg', 'image/png' or 'image/tiff'.</li>\n</ul>\n<br/>"
          },
          "500": {
            "description": "Internal server error.\n"
          },
          "503": {
            "description": "Transient fault."
          }
        },
        "produces": [
          "application/json"
        ]
      }
    }
  },
  "definitions": {
    "OperationStatus": {
      "type": "string",
      "description": "Status of the queued operation.",
      "enum": [
        "notStarted",
        "running",
        "succeeded",
        "failed"
      ],
      "x-ms-enum": {
        "name": "OperationStatus",
        "modelAsString": false
      },
      "x-nullable": false
    },
    "AnalyzeOperationResult": {
      "description": "Status and result of the queued analyze operation.",
      "type": "object",
      "required": [
        "status",
        "createdDateTime",
        "lastUpdatedDateTime"
      ],
      "properties": {
        "status": {
          "description": "Operation status.",
          "$ref": "#/definitions/OperationStatus"
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date and time (UTC) the analyze operation was submitted.",
          "type": "string",
          "x-nullable": false
        },
        "lastUpdatedDateTime": {
          "format": "date-time",
          "description": "Date and time (UTC) when the status is last updated.",
          "type": "string",
          "x-nullable": false
        },
        "analyzeResult": {
          "description": "Results of the analyze operation.",
          "$ref": "#/definitions/AnalyzeResult"
        }
      }
    },
    "TrainRequest": {
      "description": "Request parameter to train a new custom model.",
      "required": [
        "source"
      ],
      "type": "object",
      "properties": {
        "source": {
          "description": "Source path containing the training documents.",
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        },
        "sourceFilter": {
          "$ref": "#/definitions/TrainSourceFilter",
          "description": "Filter to apply to the documents in the source path for training."
        },
        "useLabelFile": {
          "description": "Use label file for training a model.",
          "type": "boolean",
          "default": false
        }
      }
    },
    "TrainSourceFilter": {
      "description": "Filter to apply to the documents in the source path for training.",
      "type": "object",
      "properties": {
        "prefix": {
          "description": "A case-sensitive prefix string to filter documents in the source path for training. For example, when using a Azure storage blob Uri, use the prefix to restrict sub folders for training.",
          "maxLength": 1024,
          "minLength": 0,
          "type": "string"
        },
        "includeSubFolders": {
          "description": "A flag to indicate if sub folders within the set of prefix folders will also need to be included when searching for content to be preprocessed.",
          "type": "boolean",
          "default": false,
          "x-nullable": false
        }
      }
    },
    "TrainResult": {
      "description": "Custom model training result.",
      "type": "object",
      "required": [
        "trainingDocuments"
      ],
      "properties": {
        "trainingDocuments": {
          "description": "List of the documents used to train the model and any errors reported in each document.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TrainingDocumentInfo"
          }
        },
        "fields": {
          "description": "List of fields used to train the model and the train operation error reported by each.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormFieldsReport"
          }
        },
        "averageModelAccuracy": {
          "description": "Average accuracy.",
          "type": "number",
          "x-nullable": false
        },
        "errors": {
          "description": "Errors returned during the training operation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormOperationError"
          }
        }
      }
    },
    "SourceDataStream": {
      "description": "A pdf document or image (jpg,png,tiff) file to analyze.",
      "type": "object"
    },
    "ModelInfo": {
      "description": "Basic custom model information.",
      "type": "object",
      "required": [
        "modelId",
        "status",
        "createdDateTime",
        "lastUpdatedDateTime"
      ],
      "properties": {
        "modelId": {
          "description": "Model identifier.",
          "type": "string",
          "format": "uuid",
          "x-nullable": false
        },
        "status": {
          "description": "Status of the model.",
          "enum": [
            "creating",
            "ready",
            "invalid"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "ModelStatus",
            "modelAsString": false
          },
          "x-nullable": false
        },
        "createdDateTime": {
          "format": "date-time",
          "description": "Date and time (UTC) when the model was created.",
          "type": "string",
          "x-nullable": false
        },
        "lastUpdatedDateTime": {
          "format": "date-time",
          "description": "Date and time (UTC) when the status is last updated.",
          "type": "string",
          "x-nullable": false
        }
      }
    },
    "Models": {
      "description": "Response to the list custom models operation.",
      "type": "object",
      "properties": {
        "summary": {
          "description": "Summary of all trained custom models.",
          "type": "object",
          "required": [
            "count",
            "limit",
            "lastUpdatedDateTime"
          ],
          "properties": {
            "count": {
              "description": "Current count of trained custom models.",
              "type": "integer",
              "x-nullable": false
            },
            "limit": {
              "description": "Max number of models that can be trained for this subscription.",
              "type": "integer",
              "x-nullable": false
            },
            "lastUpdatedDateTime": {
              "format": "date-time",
              "description": "Date and time (UTC) when the summary is last updated.",
              "type": "string",
              "x-nullable": false
            }
          }
        },
        "modelList": {
          "description": "Collection of trained custom models.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelInfo"
          }
        },
        "nextLink": {
          "description": "Link to the next page of custom models.",
          "type": "string"
        }
      }
    },
    "Model": {
      "description": "Response to the get custom model operation.",
      "type": "object",
      "required": [
        "modelInfo"
      ],
      "properties": {
        "modelInfo": {
          "$ref": "#/definitions/ModelInfo",
          "description": "Basic custom model information."
        },
        "keys": {
          "$ref": "#/definitions/KeysResult",
          "description": "Keys extracted by the custom model."
        },
        "trainResult": {
          "description": "Custom model training result.",
          "$ref": "#/definitions/TrainResult"
        }
      }
    },
    "KeysResult": {
      "description": "Keys extracted by the custom model.",
      "type": "object",
      "required": [
        "clusters"
      ],
      "properties": {
        "clusters": {
          "description": "Object mapping clusterIds to a list of keys.",
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "TrainingDocumentInfo": {
      "description": "Report for a custom model training document.",
      "type": "object",
      "required": [
        "documentName",
        "pages",
        "errors",
        "status"
      ],
      "properties": {
        "documentName": {
          "description": "Training document name.",
          "type": "string"
        },
        "pages": {
          "format": "int32",
          "description": "Total number of pages trained.",
          "type": "integer",
          "x-nullable": false
        },
        "errors": {
          "description": "List of errors.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "description": "Status of the training operation.",
          "enum": [
            "succeeded",
            "partiallySucceeded",
            "failed"
          ],
          "type": "string",
          "x-ms-enum": {
            "name": "TrainStatus",
            "modelAsString": false
          },
          "x-nullable": false
        }
      }
    },
    "FormFieldsReport": {
      "description": "Report for a custom model training field.",
      "type": "object",
      "required": [
        "fieldName",
        "accuracy"
      ],
      "properties": {
        "fieldName": {
          "description": "Training field name.",
          "type": "string"
        },
        "accuracy": {
          "description": "Estimated extraction accuracy for this field.",
          "type": "number",
          "x-nullable": false
        }
      }
    },
    "FormOperationError": {
      "description": "Error reported during an operation.",
      "type": "object",
      "required": [
        "message"
      ],
      "properties": {
        "message": {
          "description": "Error message.",
          "type": "string"
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "required": [
        "error"
      ],
      "properties": {
        "error": {
          "$ref": "#/definitions/ErrorInformation"
        }
      }
    },
    "ErrorInformation": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "AnalyzeResult": {
      "description": "Analyze operation result.",
      "type": "object",
      "required": [
        "version",
        "readResults"
      ],
      "properties": {
        "version": {
          "description": "Version of schema used for this result.",
          "type": "string"
        },
        "readResults": {
          "description": "Text extracted from the input.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ReadResult"
          }
        },
        "pageResults": {
          "description": "Page-level information extracted from the input.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PageResult"
          }
        },
        "documentResults": {
          "description": "Document-level information extracted from the input.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DocumentResult"
          }
        },
        "errors": {
          "description": "List of errors reported during the analyze operation.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FormOperationError"
          }
        }
      }
    },
    "ReadResult": {
      "description": "Text extracted from a page in the input document.",
      "type": "object",
      "required": [
        "page",
        "angle",
        "width",
        "height",
        "unit"
      ],
      "properties": {
        "page": {
          "description": "The 1-based page number in the input document.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": false
        },
        "angle": {
          "description": "The general orientation of the text in clockwise direction, measured in degrees between (-180, 180].",
          "type": "number",
          "minimum": -180,
          "maximum": 180,
          "exclusiveMinimum": true,
          "x-nullable": false
        },
        "width": {
          "description": "The width of the image/PDF in pixels/inches, respectively.",
          "type": "number",
          "minimum": 0,
          "x-nullable": false
        },
        "height": {
          "description": "The height of the image/PDF in pixels/inches, respectively.",
          "type": "number",
          "minimum": 0,
          "x-nullable": false
        },
        "unit": {
          "description": "The unit used by the width, height and boundingBox properties. For images, the unit is \"pixel\". For PDF, the unit is \"inch\".",
          "type": "string",
          "enum": [
            "pixel",
            "inch"
          ],
          "x-ms-enum": {
            "name": "LengthUnit",
            "modelAsString": false
          },
          "x-nullable": false
        },
        "language": {
          "description": "The detected language on the page overall.",
          "$ref": "#/definitions/Language"
        },
        "lines": {
          "description": "When includeTextDetails is set to true, a list of recognized text lines. The maximum number of lines returned is 300 per page. The lines are sorted top to bottom, left to right, although in certain cases proximity is treated with higher priority. As the sorting order depends on the detected text, it may change across images and OCR version updates. Thus, business logic should be built upon the actual line location instead of order.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextLine"
          }
        }
      }
    },
    "Language": {
      "description": "Language code",
      "type": "string",
      "enum": [
        "en",
        "es"
      ],
      "x-ms-enum": {
        "name": "Language",
        "modelAsString": true
      },
      "x-nullable": false
    },
    "TextLine": {
      "description": "An object representing an extracted text line.",
      "type": "object",
      "required": [
        "text",
        "boundingBox",
        "words"
      ],
      "properties": {
        "text": {
          "description": "The text content of the line.",
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of an extracted line.",
          "$ref": "#/definitions/BoundingBox"
        },
        "language": {
          "description": "The detected language of this line, if different from the overall page language.",
          "$ref": "#/definitions/Language"
        },
        "words": {
          "description": "List of words in the text line.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/TextWord"
          }
        }
      }
    },
    "TextWord": {
      "description": "An object representing a word.",
      "type": "object",
      "required": [
        "boundingBox",
        "text",
        "confidence"
      ],
      "properties": {
        "text": {
          "description": "The text content of the word.",
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of an extracted word.",
          "$ref": "#/definitions/BoundingBox"
        },
        "confidence": {
          "description": "Confidence value.",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "BoundingBox": {
      "description": "Quadrangle bounding box, with coordinates specified relative to the top-left of the original image. The eight numbers represent the four points, clockwise from the top-left corner relative to the text orientation. For image, the (x, y) coordinates are measured in pixels. For PDF, the (x, y) coordinates are measured in inches.",
      "type": "array",
      "minItems": 8,
      "maxItems": 8,
      "items": {
        "type": "number",
        "x-nullable": false
      }
    },
    "PageResult": {
      "description": "Extracted information from a single page.",
      "type": "object",
      "required": [
        "page"
      ],
      "properties": {
        "page": {
          "description": "Page number.",
          "type": "integer",
          "format": "int32",
          "minimum": 1,
          "x-nullable": false
        },
        "clusterId": {
          "description": "Cluster identifier.",
          "type": "integer",
          "format": "int32",
          "minimum": 0,
          "x-nullable": false
        },
        "keyValuePairs": {
          "description": "List of key-value pairs extracted from the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/KeyValuePair"
          }
        },
        "tables": {
          "description": "List of data tables extracted from the page.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTable"
          }
        }
      }
    },
    "KeyValuePair": {
      "description": "Information about the extracted key-value pair.",
      "type": "object",
      "required": [
        "key",
        "value",
        "confidence"
      ],
      "properties": {
        "label": {
          "description": "A user defined label for the key/value pair entry.",
          "type": "string"
        },
        "key": {
          "description": "Information about the extracted key in a key-value pair.",
          "$ref": "#/definitions/KeyValueElement"
        },
        "value": {
          "description": "Information about the extracted value in a key-value pair.",
          "$ref": "#/definitions/KeyValueElement"
        },
        "confidence": {
          "description": "Confidence value.",
          "$ref": "#/definitions/Confidence"
        }
      }
    },
    "KeyValueElement": {
      "description": "Information about the extracted key or value in a key-value pair.",
      "type": "object",
      "required": [
        "text"
      ],
      "properties": {
        "text": {
          "description": "The text content of the key or value.",
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of the key or value.",
          "$ref": "#/definitions/BoundingBox"
        },
        "elements": {
          "description": "When includeTextDetails is set to true, a list of references to the text elements constituting this key or value.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElementReference"
          }
        }
      }
    },
    "ElementReference": {
      "description": "Reference to a line or word.",
      "type": "string"
    },
    "DataTable": {
      "description": "Information about the extracted table contained in a page.",
      "type": "object",
      "required": [
        "rows",
        "columns",
        "cells"
      ],
      "properties": {
        "rows": {
          "description": "Number of rows.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": false
        },
        "columns": {
          "description": "Number of columns.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": false
        },
        "cells": {
          "description": "List of cells contained in the table.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DataTableCell"
          }
        }
      }
    },
    "DataTableCell": {
      "description": "Information about the extracted cell in a table.",
      "type": "object",
      "required": [
        "rowIndex",
        "columnIndex",
        "text",
        "boundingBox",
        "confidence"
      ],
      "properties": {
        "rowIndex": {
          "description": "Row index of the cell.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": false
        },
        "columnIndex": {
          "description": "Column index of the cell.",
          "type": "integer",
          "minimum": 0,
          "x-nullable": false
        },
        "rowSpan": {
          "description": "Number of rows spanned by this cell.",
          "type": "integer",
          "minimum": 1,
          "default": 1,
          "x-nullable": false
        },
        "columnSpan": {
          "description": "Number of columns spanned by this cell.",
          "type": "integer",
          "minimum": 1,
          "default": 1,
          "x-nullable": false
        },
        "text": {
          "description": "Text content of the cell.",
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of the cell.",
          "$ref": "#/definitions/BoundingBox"
        },
        "confidence": {
          "description": "Confidence value.",
          "$ref": "#/definitions/Confidence"
        },
        "elements": {
          "description": "When includeTextDetails is set to true, a list of references to the text elements constituting this table cell.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElementReference"
          }
        },
        "isHeader": {
          "description": "Is the current cell a header cell?",
          "type": "boolean",
          "default": false,
          "x-nullable": false
        },
        "isFooter": {
          "description": "Is the current cell a footer cell?",
          "type": "boolean",
          "default": false,
          "x-nullable": false
        }
      }
    },
    "DocumentResult": {
      "type": "object",
      "description": "A set of extracted fields corresponding to the input document.",
      "required": [
        "docType",
        "pageRange",
        "fields"
      ],
      "properties": {
        "docType": {
          "description": "Document type.",
          "type": "string"
        },
        "pageRange": {
          "description": "First and last page number where the document is found.",
          "type": "array",
          "minItems": 2,
          "maxItems": 2,
          "items": {
            "type": "integer",
            "minimum": 1,
            "x-nullable": false
          }
        },
        "fields": {
          "description": "Dictionary of named field values.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FieldValue"
          }
        }
      }
    },
    "FieldValue": {
      "description": "Recognized field value.",
      "type": "object",
      "required": [
        "type"
      ],
      "properties": {
        "type": {
          "description": "Type of field value.",
          "$ref": "#/definitions/FieldValueType"
        },
        "valueString": {
          "description": "String value.",
          "type": "string"
        },
        "valueDate": {
          "description": "Date value.",
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "valueTime": {
          "description": "Time value.",
          "type": "string",
          "format": "date-time",
          "x-nullable": false
        },
        "valuePhoneNumber": {
          "description": "Phone number value.",
          "type": "string"
        },
        "valueNumber": {
          "description": "Floating point value.",
          "type": "number",
          "x-nullable": false
        },
        "valueInteger": {
          "description": "Integer value.",
          "type": "integer",
          "x-nullable": false
        },
        "valueArray": {
          "description": "Array of field values.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldValue"
          }
        },
        "valueObject": {
          "description": "Dictionary of named field values.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FieldValue"
          }
        },
        "text": {
          "description": "Text content of the extracted field.",
          "type": "string"
        },
        "boundingBox": {
          "description": "Bounding box of the field value, if appropriate.",
          "$ref": "#/definitions/BoundingBox"
        },
        "confidence": {
          "description": "Confidence score.",
          "$ref": "#/definitions/Confidence"
        },
        "elements": {
          "description": "When includeTextDetails is set to true, a list of references to the text elements constituting this field.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElementReference"
          }
        },
        "page": {
          "description": "The 1-based page number in the input document.",
          "type": "integer",
          "minimum": 1,
          "x-nullable": false
        }
      }
    },
    "FieldValueType": {
      "type": "string",
      "description": "Semantic data type of the field value.",
      "enum": [
        "string",
        "date",
        "time",
        "phoneNumber",
        "number",
        "integer",
        "array",
        "object"
      ],
      "x-ms-enum": {
        "name": "FieldValueType",
        "modelAsString": false
      },
      "x-nullable": false
    },
    "Confidence": {
      "description": "Confidence value.",
      "type": "number",
      "minimum": 0,
      "maximum": 1,
      "x-nullable": false
    },
    "SourcePath": {
      "description": "Url to source data.",
      "type": "object",
      "properties": {
        "source": {
          "description": "Url path.",
          "maxLength": 2048,
          "minLength": 0,
          "type": "string"
        }
      },
      "example": {
        "source": "http://example.com/test.jpg"
      }
    }
  },
  "tags": []
}